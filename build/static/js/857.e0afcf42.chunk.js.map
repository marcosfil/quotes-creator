{"version":3,"file":"static/js/857.e0afcf42.chunk.js","mappings":"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","sources":["webpack://react-complete-guide/./src/components/quotes/HighlightedQuote.module.css?c98c","components/quotes/HighlightedQuote.js","webpack://react-complete-guide/./src/components/comments/Comments.module.css?d88e","webpack://react-complete-guide/./src/components/comments/NewCommentForm.module.css?81c1","components/comments/NewCommentForm.js","webpack://react-complete-guide/./src/components/comments/CommentItem.module.css?204f","components/comments/CommentItem.js","webpack://react-complete-guide/./src/components/comments/CommentsList.module.css?06d6","components/comments/CommentsList.js","components/comments/Comments.js","pages/QuoteDetail.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"quote\":\"HighlightedQuote_quote__qgG4V\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"Comments_comments__g50V7\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"NewCommentForm_form__Fe19v\",\"loading\":\"NewCommentForm_loading__bAQ08\",\"control\":\"NewCommentForm_control__nyHzE\",\"actions\":\"NewCommentForm_actions__+xppL\"};","import { useRef, useEffect } from \"react\";\nimport useHttp from \"../../hooks/use-http\";\n\nimport { addComment } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./NewCommentForm.module.css\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n\n    // optional: Could validate here\n\n    // send comment to server\n\n    sendRequest({ commentData: { text: enteredText }, quoteId: props.quoteId });\n\n    // sendRequest({ commentData: enteredText, quoteId: props.quoteId });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"CommentItem_item__+rdfW\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"CommentsList_comments__-1dKo\"};","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useCallback, useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"./CommentsList\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n\n  const { quoteId } = params;\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  let comments;\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (\n    status === \"completed\" &&\n    !loadedComments &&\n    loadedComments.length === 0\n  ) {\n    comments = <p className=\"centered\">No commets added yet!</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import { Fragment, useEffect } from \"react\";\r\nimport { Route, useParams, Link, useRouteMatch } from \"react-router-dom\";\r\n\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\n\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\n\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\n\r\nimport Comments from \"../components/comments/Comments\";\r\n\r\n// const DUMMY_QUOTES = [\r\n//   { id: \"q1\", author: \"Max\", text: \"Learning React is fun!\" },\r\n//   { id: \"q2\", author: \"Max2\", text: \"Learning React is bad!\" },\r\n//   { id: \"q3\", author: \"Max3\", text: \"Learning React is great!\" },\r\n// ];\r\n\r\nconst QuoteDetail = () => {\r\n  const match = useRouteMatch();\r\n  const params = useParams();\r\n\r\n  const { quoteId } = params;\r\n\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedQuote,\r\n    error,\r\n  } = useHttp(getSingleQuote, true);\r\n\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n  }, [sendRequest, quoteId]);\r\n\r\n  // const quote = DUMMY_QUOTES.find((quote) => quote.id === params.quoteId);\r\n\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n  if (error) {\r\n    return <p className=\"centered focused\">{error}</p>;\r\n  }\r\n\r\n  if (!loadedQuote.text) {\r\n    return (\r\n      <Fragment>\r\n        <HighlightedQuote text={\"No Quote Found!\"}></HighlightedQuote>\r\n      </Fragment>\r\n    );\r\n  }\r\n  return (\r\n    <Fragment>\r\n      <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n      <Route path={match.path} exact>\r\n        <div className=\"centered\">\r\n          <Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n            Load Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments />\r\n      </Route>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default QuoteDetail;\r\n"],"names":["props","className","classes","text","author","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","quoteId","onSubmit","LoadingSpinner","htmlFor","id","rows","ref","comments","map","comment","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","match","useRouteMatch","getSingleQuote","loadedQuote","Fragment","path","exact","to","url"],"sourceRoot":""}